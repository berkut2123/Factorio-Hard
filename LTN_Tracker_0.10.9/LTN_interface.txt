--[[ register events from LTN:
if remote.interfaces["logistic-train-network"] then
  script.on_event(remote.call("logistic-train-network", "on_stops_updated"), on_stops_updated)
  script.on_event(remote.call("logistic-train-network", "on_dispatcher_updated"), on_dispatcher_updated)
end
]]--


--[[ EVENTS
on_stops_updated
Raised every UpdateInterval, after delivery generation
-> Contains:
event.logistic_train_stops = {  [stopID],  {
    -- stop data
    activeDeliveries,
    entity,
    input,
    output,
    lampControl,
    errorCode,

    -- control signals
    isDepot,
    network_id,
    maxTraincars,
    minTraincars,
    trainLimit,
    provideThreshold,
    provideStackThreshold,
    providePriority,
    requestThreshold,
    requestStackThreshold,
    requestPriority,
    lockedSlots,
    noWarnings,

    -- parked train data
    parkedTrain,
    parkedTrainID,
    parkedTrainFacesStop,
}}


on_dispatcher_updated
Raised every UpdateInterval, after delivery generation
-> Contains:
  event.update_interval = int -- LTN update interval (depends on existing ltn stops and stops per tick setting
  event.provided_by_stop = { [stopID], { [item], count } }
  event.requests_by_stop = { [stopID], { [item], count } }
  event.deliveries = { trainID = {force, train, from, to, networkID, started, shipment = { item = count } } }
  event.available_trains = { [trainID ], { capacity, fluid_capacity, force, network_id, train } }


on_dispatcher_no_train_found
Raised when no train was found to handle a request
-> Contains:
  event.to = requester.backer_name
  event.to_id = requester.unit_number
  event.network_id
  (optional) event.item
  (optional) event.from
  (optional) event.from_id
  (optional) event.minTraincars
  (optional) event.maxTraincars
  (optional) event.shipment = { [item], count }


on_delivery_pickup_complete
Raised when a train leaves provider stop
-> Contains:
  event.trainID
  event.delivery = {force, train, from, to, networkID, started, shipment = { [item], count } } -- updated shipment to current train inventory
  event.original_shipment = { [item], count } }


on_delivery_completed
Raised when train leaves requester stop
-> Contains:
  event.trainID
  event.delivery = {force, train, from, to, networkID, started, shipment = { [item], count } }


on_delivery_failed
Raised when rolling stock of a train gets removed or the delivery timed out
-> Contains:
  event.trainID
  event.delivery = {force, train, from, to, networkID, started, shipment = { [item], count } }

--]]